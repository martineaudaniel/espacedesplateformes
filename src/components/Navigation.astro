---
import { DarkMode } from 'accessible-astro-components'
import { Image } from 'astro:assets'
import logo from '../assets/img/logo.svg'

const basePath = import.meta.env.BASE_URL
---

<div id="main-navigation" class="py-8">
  <div class="container">
    <a href={`${basePath}`} class="flex items-center gap-2 !no-underline">
      <Image
        src=`${basePath}/icons/home.svg`
        alt="Home"
        width="47"
        height="37"
        className="dark:filter dark:invert dark:brightness-110"
      />
      <span class="font-bold">Accueil | Home</span>
    </a>
    <div class="wrapper">
      <nav class="main-menu" aria-label="Main navigation">
        <ul class="menu">
          <slot />
        </ul>
      </nav>
      <DarkMode />
    </div>
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    // Variables
    const mainNav = document.querySelector('#main-navigation')
    const mainMenu = mainNav.querySelector('ul')
    const dropdownMenus = [...document.querySelectorAll('.has-dropdown button')]

    // Function to set the active menu item
    const setActiveMenuItem = () => {
      const currentPathname = window.location.pathname
      const menuItems = [...mainMenu.querySelectorAll('a:not([rel*="external"])')]

      menuItems.forEach((menuItem) => {
        if (currentPathname.includes(menuItem.pathname.replaceAll('/', '')) && menuItem.textContent !== 'Home') {
          menuItem.classList.add('is-active')
          menuItem.setAttribute('aria-current', 'page')
        } else if (menuItem.textContent === 'Home' && currentPathname === '/') {
          menuItem.classList.add('is-active')
          menuItem.setAttribute('aria-current', 'page')
        }
      })
    }

    // Execute the function
    setActiveMenuItem()

    // Dropdown menu toggle
    dropdownMenus.forEach((dropdownMenu) => {
      dropdownMenu.addEventListener('click', (event) => {
        event.preventDefault()
        const isExpanded = dropdownMenu.getAttribute('aria-expanded') === 'true'
        dropdownMenu.setAttribute('aria-expanded', !isExpanded)
        dropdownMenu.classList.toggle('show')
      })
    })

    // Close dropdowns when clicking outside
    window.addEventListener('click', (event) => {
      if (!event.target.closest('.has-dropdown') && !event.target.classList.contains('submenu-item')) {
        dropdownMenus.forEach((dropdownMenu) => {
          dropdownMenu.setAttribute('aria-expanded', 'false')
          dropdownMenu.classList.remove('show')
        })
      }
    })
  })
</script>

<style lang="scss" is:global>
  @use '../assets/scss/base/breakpoint' as *;
  @use '../assets/scss/base/outline' as *;

  #main-navigation {
    > .container {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
    }

    .wrapper {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    nav {
      > ul {
        display: flex;
        gap: 1.5rem;
        list-style-type: none;

        a,
        button {
          text-decoration: none;
          font-size: 1.125rem;
          line-height: 1.6875rem;
        }

        a:hover,
        a:focus,
        .is-active,
        .has-dropdown > button:hover,
        .has-dropdown > button:focus {
          text-decoration: underline;
          text-decoration-thickness: 1px;
          text-decoration-style: wavy;
          text-underline-offset: 7px;
        }

        .is-active {
          font-weight: bold;
        }
      }
    }

    .has-dropdown {
      position: relative;

      > button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0;
        margin-top: -1px;
        border: none;
        background: none;
        color: var(--action-color);

        &:hover {
          color: var(--action-color-state);

          &::after {
            border-color: var(--action-color-state);
          }
        }

        &::after {
          content: '';
          width: 0.85rem;
          height: 0.75em;
          margin-top: -0.25rem;
          border-style: solid;
          border-width: 0.2em 0.2em 0 0;
          border-color: var(--action-color);
          transform: rotate(135deg);
        }

        &.show {
          &::after {
            margin-top: 0.25rem;
            transform: rotate(-45deg);
          }

          ~ ul {
            display: flex;
            flex-direction: column;
            gap: 1rem;
          }
        }
      }

      ul {
        display: none;
        position: absolute;
        z-index: 100;
        min-width: 260px;
        top: 125%;
        right: 0;
        padding: 1rem;
        background-color: var(--neutral-background);
        border: 2px solid black;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);

        li {
          list-style: none;

          a {
            display: block;
            padding: 0.5rem 0;
            color: inherit;
            text-decoration: none;

            &:hover {
              text-decoration: underline;
            }
          }
        }
      }
    }
  }

  .darkmode-toggle {
    padding: 0;
    border: none;
    background: none;

    svg {
      width: 30px;
      margin-top: 4px;
    }

    svg path {
      fill: var(--action-color);
    }

    &:hover {
      svg path {
        fill: var(--action-color-state);
      }
    }

    &:focus {
      @include outline;

      &:not(:focus-visible) {
        outline: none;
        box-shadow: none;
      }
    }
  }
</style>
